analyzer:
  exclude:
    - "**/build/**"
    - "**/*.g.dart"
    - "**/*.mocks.dart"

  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

linter:
  rules:
    # Core Effective Dart rules.
    - avoid_empty_else
    - avoid_relative_lib_imports
    - avoid_shadowing_type_parameters
    - avoid_types_as_parameter_names
    - await_only_futures
    - camel_case_extensions
    - camel_case_types
    - curly_braces_in_flow_control_structures
    - depend_on_referenced_packages
    - empty_catches
    - file_names
    - hash_and_equals
    - iterable_contains_unrelated_type
    - list_remove_unrelated_type
    - no_duplicate_case_values
    - non_constant_identifier_names
    - null_check_on_nullable_type_parameter
    - package_prefixed_library_names
    - prefer_generic_function_type_aliases
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_iterable_whereType
    - prefer_typing_uninitialized_variables
    - provide_deprecation_message
    - unnecessary_overrides
    - unrelated_type_equality_checks
    - valid_regexps
    - void_checks

    # Recommended Effective Dart rules.
    - always_require_non_null_named_parameters
    - annotate_overrides
    - avoid_function_literals_in_foreach_calls
    - avoid_init_to_null
    - avoid_null_checks_in_equality_operators
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    - avoid_returning_null_for_void
    - avoid_single_cascade_in_expression_statements
    - constant_identifier_names
    - comment_references
    - control_flow_in_finally
    - directives_ordering
    - empty_constructor_bodies
    - empty_statements
    - implementation_imports
    - library_names
    - library_prefixes
    - library_private_types_in_public_api
    - no_leading_underscores_for_library_prefixes
    - no_leading_underscores_for_local_identifiers
    - null_closures
    - overridden_fields
    - package_names
    - prefer_adjacent_string_concatenation
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_contains
    - prefer_equal_for_default_values
    - prefer_final_fields
    - prefer_for_elements_to_map_fromIterable
    - prefer_function_declarations_over_variables
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_interpolation_to_compose_strings
    - prefer_is_not_operator
    - prefer_null_aware_operators
    - prefer_spread_collections
    - prefer_void_to_null
    - recursive_getters
    - slash_for_doc_comments
    - type_init_formals
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_constructor_name
    - unnecessary_getters_setters
    - unnecessary_late
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_in_if_null_operators
    - unnecessary_nullable_for_final_variable_declarations
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - unnecessary_this
    - use_function_type_syntax_for_parameters
    - use_rethrow_when_possible

    # Our custom rules
    - avoid_catching_errors
    - avoid_dynamic_calls
    - avoid_types_on_closure_parameters
    - avoid_catches_without_on_clauses
    - avoid_returning_this
    - avoid_redundant_argument_values
    - avoid_print
    - avoid_positional_boolean_parameters
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_private_typedef_functions
    - avoid_classes_with_only_static_members
    - avoid_unnecessary_containers
    - avoid_void_async
    - always_put_control_body_on_new_line
    - cascade_invocations
    - cancel_subscriptions
    - cast_nullable_to_non_nullable
    - close_sinks
    - deprecated_consistency
    - package_api_docs
    - prefer_mixin
    - prefer_relative_imports
    - prefer_asserts_in_initializer_lists
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_final_in_for_each
    - prefer_final_locals
    - type_annotate_public_apis
    - lines_longer_than_80_chars
    - no_logic_in_create_state
    - use_to_and_as_if_applicable
    - use_setters_to_change_properties
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    - use_key_in_widget_constructors
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_super_parameters
    - unnecessary_await_in_return
    - unnecessary_parenthesis
    - unnecessary_lambdas
    - sized_box_for_whitespace
    - sort_child_properties_last
    - sort_constructors_first
    - sort_unnamed_constructors_first
    - omit_local_variable_types
    - only_throw_errors
